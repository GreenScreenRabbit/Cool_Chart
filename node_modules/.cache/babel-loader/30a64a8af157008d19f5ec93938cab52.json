{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Viktor\\\\trd\\\\src\\\\stread\\\\chartFormula\\\\ChartFormula.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useEffect, useRef, useState } from \"react\";\nimport { Col, Row } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { actions } from \"../../actions and const/actions\";\nimport \"./chartFormula.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nlet useClickOutside = handler => {\n  _s();\n\n  let domNode = useRef(null);\n  useEffect(() => {\n    let maybeHandler = e => {\n      if (!domNode.current.contains(e.target)) {\n        handler();\n      }\n    };\n\n    document.addEventListener(\"mousedown\", maybeHandler);\n    return () => {\n      document.removeEventListener(\"mousedown\", maybeHandler);\n    };\n  });\n  return domNode;\n};\n\n_s(useClickOutside, \"oMeNP8Y0LBP7p8Tz/f0Pw3T8oxI=\");\n\nconst InputsChart = props => {\n  n;\n\n  const takeNumber = (v, value) => {\n    if (isNaN(+v) != true) {\n      if ((v + value).toString().length <= 3) {\n        return v;\n      } else {\n        return value;\n      }\n    } else {\n      return value;\n    }\n  };\n\n  const {\n    title,\n    callback,\n    value,\n    onClick\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"\",\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"inputsChart1\",\n      style: {\n        fontSize: \"26px\"\n      },\n      onClick: onClick,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inputContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"inputContainer-inputTitle\",\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"required\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: value,\n          className: \"inputRowChart\",\n          onChange: e => {\n            callback(takeNumber(e.target.value, value));\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n};\n\n_c = InputsChart;\n\nconst ChartFormula = props => {\n  _s2();\n\n  const [initialAmount, setInitialAmount] = useState(\"\");\n  const [isReplenishmentDropmenuOpen, setIsReplenishmentDropmenuOpen] = useState(false);\n  const domNodePeriodicity = useClickOutside(() => {\n    setIsReplenishmentDropmenuOpen(false);\n  });\n\n  const takeNumber = (v, value) => {\n    if (isNaN(+v) != true) {\n      if ((v + value).toString().length <= 3) {\n        return v;\n      } else {\n        return value;\n      }\n    } else {\n      return value;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"body-inputsContainer\",\n      style: {\n        marginTop: \"50px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Row, {\n        className: \"inputRowContainer\",\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          md: {\n            offset: 1,\n            span: 7\n          },\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"inputsChart1\",\n            style: {\n              fontSize: \"26px\"\n            },\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"inputContainer\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"inputContainer-inputTitle\",\n                children: \"initial amount\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"required\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 114,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 115,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                name: \"your-name\",\n                value: props.initialAmount,\n                onChange: e => props.setInitialAmount(e.target.value),\n                className: \"inputRowChart\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 116,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        className: \"inputRowContainer\",\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          md: {\n            offset: 1,\n            span: 5\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"inputsChart1\",\n              style: {\n                fontSize: \"26px\"\n              },\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"inputContainer\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"inputContainer-inputTitle\",\n                  children: \"replenishment\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 134,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"required\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 135,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 136,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: props.replenishment,\n                  className: \"inputRowChart\",\n                  onChange: e => {\n                    // props.setReplenishment(takeNumber(e.target.value, \"5\"));\n                    props.setReplenishment(e.target.value);\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 137,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 133,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          md: {\n            offset: 0,\n            span: 5\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"inputsChart1\",\n              style: {\n                fontSize: \"26px\"\n              },\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"inputContainer\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"inputContainer-inputTitle\",\n                  children: \"Periodicity\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 154,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"required\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 155,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 156,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"\",\n                  ref: domNodePeriodicity,\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"text\",\n                    value: props.periodicity,\n                    className: \"inputRowChart\",\n                    onClick: () => setIsReplenishmentDropmenuOpen(!isReplenishmentDropmenuOpen),\n                    onChange: e => {\n                      setInitialAmount(takeNumber(e.target.value, \"3\"));\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 158,\n                    columnNumber: 41\n                  }, this), isReplenishmentDropmenuOpen ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"replenishmentDropmenuOpen-dropItem\",\n                      onClick: () => {\n                        props.setPeriodicity(\"EVERY YEAR\");\n                        setIsReplenishmentDropmenuOpen(false);\n                      },\n                      children: \"EVERY YEAR\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 169,\n                      columnNumber: 49\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"replenishmentDropmenuOpen-dropItem\",\n                      onClick: () => {\n                        props.setPeriodicity(\"EVERY MONTH\");\n                        setIsReplenishmentDropmenuOpen(false);\n                      },\n                      children: \"EVERY MONTH\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 178,\n                      columnNumber: 49\n                    }, this)]\n                  }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 189,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 157,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        className: \"inputRowContainer\",\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          md: {\n            offset: 1,\n            span: 5\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"inputsChart1\",\n              style: {\n                fontSize: \"26px\"\n              },\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"inputContainer\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"inputContainer-inputTitle\",\n                  children: \"Interest accruals\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 204,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"required\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 205,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 206,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: props.interestAccruals,\n                  className: \"inputRowChart\",\n                  onChange: e => {\n                    props.setInterestAccruals(e.target.value);\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 207,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 203,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          md: {\n            offset: 0,\n            span: 5\n          },\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"inputsChart\",\n            style: {\n              fontSize: \"48px\",\n              textAlign: \"center\",\n              left: \"40%\"\n            },\n            children: \"YEAR\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        className: \"inputRowContainer\",\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          md: {\n            offset: 1,\n            span: 10\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"inputsChart1\",\n              style: {\n                fontSize: \"26px\"\n              },\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"inputContainer\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"inputContainer-inputTitle\",\n                  children: \"Number of years\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 232,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"required\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 233,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 234,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: props.countYear,\n                  className: \"inputRowChart\",\n                  onChange: e => {\n                    props.setCounterYear(takeNumber(e.target.value, \"3\"));\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 235,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 231,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s2(ChartFormula, \"Pm++efE7Xwv5AJhdXdV36G5DJ/w=\", false, function () {\n  return [useClickOutside];\n});\n\n_c2 = ChartFormula;\n\nconst mapStateToProps = state => ({\n  countYear: state.generalState.countYear,\n  periodicity: state.generalState.periodicity,\n  initialAmount: state.generalState.initialAmount,\n  replenishment: state.generalState.replenishment,\n  interestAccruals: state.generalState.interestAccruals\n});\n\nexport default connect(mapStateToProps, {\n  setCounterYear: actions.setCounterYear,\n  setPeriodicity: actions.setPeriodicity,\n  setInitialAmount: actions.setInitialAmount,\n  setReplenishment: actions.setReplenishment,\n  setInterestAccruals: actions.setInterestAccruals\n})(ChartFormula);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"InputsChart\");\n$RefreshReg$(_c2, \"ChartFormula\");","map":{"version":3,"sources":["C:/Users/Viktor/trd/src/stread/chartFormula/ChartFormula.tsx"],"names":["useEffect","useRef","useState","Col","Row","connect","actions","useClickOutside","handler","domNode","maybeHandler","e","current","contains","target","document","addEventListener","removeEventListener","InputsChart","props","n","takeNumber","v","value","isNaN","toString","length","title","callback","onClick","fontSize","ChartFormula","initialAmount","setInitialAmount","isReplenishmentDropmenuOpen","setIsReplenishmentDropmenuOpen","domNodePeriodicity","marginTop","offset","span","replenishment","setReplenishment","periodicity","setPeriodicity","interestAccruals","setInterestAccruals","textAlign","left","countYear","setCounterYear","mapStateToProps","state","generalState"],"mappings":"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","sourcesContent":["import { useEffect, useRef, useState } from \"react\";\r\nimport { Col, Row } from \"react-bootstrap\";\r\nimport { connect, RootStateOrAny } from \"react-redux\";\r\nimport { actions } from \"../../actions and const/actions\";\r\nimport \"./chartFormula.css\";\r\n\r\nlet useClickOutside = (handler: any) => {\r\n    let domNode = useRef<HTMLDivElement>(null);\r\n    useEffect(() => {\r\n        let maybeHandler = (e: MouseEvent) => {\r\n            if (!domNode!.current!.contains(e.target as Node)) {\r\n                handler();\r\n            }\r\n        };\r\n        document.addEventListener(\"mousedown\", maybeHandler);\r\n        return () => {\r\n            document.removeEventListener(\"mousedown\", maybeHandler);\r\n        };\r\n    });\r\n    return domNode;\r\n};\r\n\r\ntype PropsTypeInputsChart = {\r\n    title: string;\r\n    callback: (n: string) => void;\r\n    value: string;\r\n    onClick?: () => void;\r\n};\r\n\r\ntype PropsType = {\r\n    setCounterYear: (year: string) => void;\r\n    countYear: string;\r\n    setPeriodicity: (per: string) => void;\r\n    periodicity: string;\r\n    setInitialAmount: (amount: string) => void;\r\n    initialAmount: string;\r\n    setReplenishment: (rep: string) => void;\r\n    replenishment: string;\r\n    // interestAccruals setInterestAccruals\r\n    setInterestAccruals: (inAc: string) => void;\r\n    interestAccruals: string;\r\n};\r\n\r\nconst InputsChart = (props: PropsTypeInputsChart) => {\r\n\r\n\r\n        n\r\n\r\n\r\n    const takeNumber = (v: string, value: string) => {\r\n        if (isNaN(+v) != true) {\r\n            if ((v + value).toString().length <= 3) {\r\n                return v;\r\n            } else {\r\n                return value;\r\n            }\r\n        } else {\r\n            return value;\r\n        }\r\n    };\r\n\r\n    const { title, callback, value, onClick } = props;\r\n\r\n    return (\r\n        <div className=\"\">\r\n            <p className=\"inputsChart1\" style={{ fontSize: \"26px\" }} onClick={onClick}>\r\n                <div className=\"inputContainer\">\r\n                    <p className=\"inputContainer-inputTitle\">{title}</p>\r\n                    <span className=\"required\"></span>\r\n                    <br />\r\n                    <input\r\n                        type=\"text\"\r\n                        value={value}\r\n                        className=\"inputRowChart\"\r\n                        onChange={(e) => {\r\n                            callback(takeNumber(e.target.value, value));\r\n                        }}\r\n                    />\r\n                </div>\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst ChartFormula = (props: PropsType) => {\r\n    const [initialAmount, setInitialAmount] = useState<string>(\"\");\r\n\r\n    const [isReplenishmentDropmenuOpen, setIsReplenishmentDropmenuOpen] = useState<boolean>(false);\r\n\r\n    const domNodePeriodicity = useClickOutside(() => {\r\n        setIsReplenishmentDropmenuOpen(false);\r\n    });\r\n\r\n    const takeNumber = (v: string, value: string) => {\r\n        if (isNaN(+v) != true) {\r\n            if ((v + value).toString().length <= 3) {\r\n                return v;\r\n            } else {\r\n                return value;\r\n            }\r\n        } else {\r\n            return value;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"body-inputsContainer\" style={{ marginTop: \"50px\" }}>\r\n                <Row className=\"inputRowContainer\">\r\n                    <Col md={{ offset: 1, span: 7 }}>\r\n                        <p className=\"inputsChart1\" style={{ fontSize: \"26px\" }}>\r\n                            <div className=\"inputContainer\">\r\n                                <p className=\"inputContainer-inputTitle\">initial amount</p>\r\n                                <span className=\"required\"></span>\r\n                                <br />\r\n                                <input\r\n                                    type=\"text\"\r\n                                    name=\"your-name\"\r\n                                    value={props.initialAmount}\r\n                                    onChange={(e) => props.setInitialAmount(e.target.value)}\r\n                                    className=\"inputRowChart\"\r\n                                />\r\n                            </div>\r\n                        </p>\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"inputRowContainer\">\r\n                    <Col md={{ offset: 1, span: 5 }}>\r\n                        {/* <InputsChart title={\"replenishment\"} callback={setInitialAmount} value={\"3\"} /> */}\r\n                        {/* setReplenishment replenishment */}\r\n                        <div className=\"\">\r\n                            <p className=\"inputsChart1\" style={{ fontSize: \"26px\" }}>\r\n                                <div className=\"inputContainer\">\r\n                                    <p className=\"inputContainer-inputTitle\">replenishment</p>\r\n                                    <span className=\"required\"></span>\r\n                                    <br />\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        value={props.replenishment}\r\n                                        className=\"inputRowChart\"\r\n                                        onChange={(e) => {\r\n                                            // props.setReplenishment(takeNumber(e.target.value, \"5\"));\r\n                                            props.setReplenishment(e.target.value);\r\n                                        }}\r\n                                    />\r\n                                </div>\r\n                            </p>\r\n                        </div>\r\n                    </Col>\r\n                    <Col md={{ offset: 0, span: 5 }}>\r\n                        <div className=\"\">\r\n                            <p className=\"inputsChart1\" style={{ fontSize: \"26px\" }}>\r\n                                <div className=\"inputContainer\">\r\n                                    <p className=\"inputContainer-inputTitle\">Periodicity</p>\r\n                                    <span className=\"required\"></span>\r\n                                    <br />\r\n                                    <div className=\"\" ref={domNodePeriodicity}>\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            value={props.periodicity}\r\n                                            className=\"inputRowChart\"\r\n                                            onClick={() => setIsReplenishmentDropmenuOpen(!isReplenishmentDropmenuOpen)}\r\n                                            onChange={(e) => {\r\n                                                setInitialAmount(takeNumber(e.target.value, \"3\"));\r\n                                            }}\r\n                                        />\r\n                                        {isReplenishmentDropmenuOpen ? (\r\n                                            <>\r\n                                                <div\r\n                                                    className=\"replenishmentDropmenuOpen-dropItem\"\r\n                                                    onClick={() => {\r\n                                                        props.setPeriodicity(\"EVERY YEAR\");\r\n                                                        setIsReplenishmentDropmenuOpen(false);\r\n                                                    }}\r\n                                                >\r\n                                                    EVERY YEAR\r\n                                                </div>\r\n                                                <div\r\n                                                    className=\"replenishmentDropmenuOpen-dropItem\"\r\n                                                    onClick={() => {\r\n                                                        props.setPeriodicity(\"EVERY MONTH\");\r\n                                                        setIsReplenishmentDropmenuOpen(false);\r\n                                                    }}\r\n                                                >\r\n                                                    EVERY MONTH\r\n                                                </div>\r\n                                            </>\r\n                                        ) : (\r\n                                            <div className=\"\"></div>\r\n                                        )}\r\n                                    </div>\r\n                                </div>\r\n                            </p>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"inputRowContainer\">\r\n                    <Col md={{ offset: 1, span: 5 }}>\r\n                        {/* setInterestAccruals interestAccruals */}\r\n\r\n                        <div className=\"\">\r\n                            <p className=\"inputsChart1\" style={{ fontSize: \"26px\" }}>\r\n                                <div className=\"inputContainer\">\r\n                                    <p className=\"inputContainer-inputTitle\">Interest accruals</p>\r\n                                    <span className=\"required\"></span>\r\n                                    <br />\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        value={props.interestAccruals}\r\n                                        className=\"inputRowChart\"\r\n                                        onChange={(e) => {\r\n                                            props.setInterestAccruals(e.target.value);\r\n                                        }}\r\n                                    />\r\n                                </div>\r\n                            </p>\r\n                        </div>\r\n\r\n                        {/* <InputsChart title={\"Interest accruals\"} callback={setInitialAmount} value={\"3\"} /> */}\r\n                    </Col>\r\n                    <Col md={{ offset: 0, span: 5 }}>\r\n                        <p className=\"inputsChart\" style={{ fontSize: \"48px\", textAlign: \"center\", left: \"40%\" }}>\r\n                            YEAR\r\n                        </p>\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"inputRowContainer\">\r\n                    <Col md={{ offset: 1, span: 10 }}>\r\n                        <div className=\"\">\r\n                            <p className=\"inputsChart1\" style={{ fontSize: \"26px\" }} >\r\n                                <div className=\"inputContainer\">\r\n                                    <p className=\"inputContainer-inputTitle\">Number of years</p>\r\n                                    <span className=\"required\"></span>\r\n                                    <br />\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        value={props.countYear}\r\n                                        className=\"inputRowChart\"\r\n                                        onChange={(e) => {\r\n                                            props.setCounterYear(takeNumber(e.target.value, \"3\"));\r\n                                        }}\r\n                                    />\r\n                                </div>\r\n                            </p>\r\n                        </div>\r\n{/* \r\n                        <InputsChart\r\n                            title={\"Number of years\"}\r\n                            callback={props.setCounterYear}\r\n                            value={props.countYear}\r\n                        /> */}\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: RootStateOrAny) => ({\r\n    countYear: state.generalState.countYear,\r\n    periodicity: state.generalState.periodicity,\r\n    initialAmount: state.generalState.initialAmount,\r\n    replenishment: state.generalState.replenishment,\r\n    interestAccruals: state.generalState.interestAccruals,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    setCounterYear: actions.setCounterYear,\r\n    setPeriodicity: actions.setPeriodicity,\r\n    setInitialAmount: actions.setInitialAmount,\r\n    setReplenishment: actions.setReplenishment,\r\n    setInterestAccruals: actions.setInterestAccruals,\r\n})(ChartFormula);\r\n"]},"metadata":{},"sourceType":"module"}