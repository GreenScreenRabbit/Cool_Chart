{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Viktor\\\\trd\\\\src\\\\stread\\\\chartPic\\\\ChartPic.tsx\";\nimport { Col, Row } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport \"./chartPic.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChartPic = props => {\n  const sticks = [];\n\n  const takePeriodicityYear = () => {\n    if (props.periodicity == \"EVERY MONTH\") {\n      return +props.replenishment * 12;\n    } else {\n      return +props.replenishment;\n    } // EVERY YEAR EVERY MONTH\n    // replenishment\n\n  };\n\n  const periodicityYear = takePeriodicityYear();\n  console.log(\"periodicityYear\");\n  console.log(periodicityYear);\n\n  const calculationDefaultMoney = (periodicityYear, countYear, initialAmount) => {\n    const defaultMoney = [];\n    defaultMoney.push(+initialAmount + periodicityYear);\n\n    for (var i = 0; i < +countYear; i++) {\n      defaultMoney.push();\n    }\n  };\n\n  const calculationMoney = () => {\n    const calculationCompoundInterest = () => {};\n  };\n\n  const createSticks = yearCount => {\n    for (var i = 0; i < +yearCount; i++) {\n      console.log(i);\n      console.log(yearCount);\n      sticks.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stickContainer-stick\",\n        style: {\n          flexBasis: \"10%\"\n        },\n        children: \"g\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this));\n    } // let keys = [\"a\", \"b\", \"c\", \"d\", \"e\"];\n    // let values = [1, 2, 3, 4, 5];\n    // let obj = {};\n    // for (let i = 0; i <= 4; i++) {\n    //     obj[keys[i]] = values[i];\n    // }\n    // console.log(obj);\n\n  };\n\n  createSticks(props.countYear);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"body-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: \"100%\",\n        width: \"100%\",\n        position: \"relative\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        style: {\n          height: \"100%\",\n          width: \"100%\"\n        },\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          md: {\n            offset: 1,\n            span: 10\n          },\n          style: {\n            position: \"relative\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stickContainer\",\n            children: sticks.map(stick => stick)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n};\n\n_c = ChartPic;\n\nconst mapStateToProps = state => ({\n  countYear: state.generalState.countYear,\n  periodicity: state.generalState.periodicity,\n  initialAmount: state.generalState.initialAmount,\n  replenishment: state.generalState.replenishment,\n  interestAccruals: state.generalState.interestAccruals\n});\n\nexport default connect(mapStateToProps, {})(ChartPic);\n\nvar _c;\n\n$RefreshReg$(_c, \"ChartPic\");","map":{"version":3,"sources":["C:/Users/Viktor/trd/src/stread/chartPic/ChartPic.tsx"],"names":["Col","Row","connect","ChartPic","props","sticks","takePeriodicityYear","periodicity","replenishment","periodicityYear","console","log","calculationDefaultMoney","countYear","initialAmount","defaultMoney","push","i","calculationMoney","calculationCompoundInterest","createSticks","yearCount","flexBasis","height","width","position","offset","span","map","stick","mapStateToProps","state","generalState","interestAccruals"],"mappings":"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","sourcesContent":["import { Col, Row } from \"react-bootstrap\";\r\nimport { connect, RootStateOrAny } from \"react-redux\";\r\nimport \"./chartPic.css\";\r\n\r\ntype PropsType = {\r\n    countYear: string;\r\n    periodicity: string;\r\n    initialAmount: string;\r\n    replenishment: string;\r\n    interestAccruals: string;\r\n};\r\n\r\nconst ChartPic = (props: PropsType) => {\r\n    const sticks: JSX.Element[] = [];\r\n\r\n    const takePeriodicityYear = ():number => {\r\n        if (props.periodicity == \"EVERY MONTH\") {\r\n            return +props.replenishment * 12;\r\n        } else {\r\n            return +props.replenishment;\r\n        }\r\n\r\n        // EVERY YEAR EVERY MONTH\r\n        // replenishment\r\n    };\r\n\r\n    const periodicityYear = takePeriodicityYear();\r\n\r\n    console.log(\"periodicityYear\");\r\n    console.log(periodicityYear);\r\n    \r\n    const calculationDefaultMoney = (periodicityYear:number,countYear:string,initialAmount:string) => {\r\n        const defaultMoney:number[] = []\r\n\r\n        defaultMoney.push(+initialAmount + periodicityYear)\r\n\r\n        for (var i = 0; i < +countYear; i++) {\r\n            \r\n            defaultMoney.push()\r\n        }\r\n    };\r\n\r\n    const calculationMoney = () => {\r\n        const calculationCompoundInterest = () => {};\r\n    };\r\n\r\n    const createSticks = (yearCount: string) => {\r\n        for (var i = 0; i < +yearCount; i++) {\r\n            console.log(i);\r\n            console.log(yearCount);\r\n            sticks.push(\r\n                <div className=\"stickContainer-stick\" style={{ flexBasis: \"10%\" }}>\r\n                    g\r\n                </div>\r\n            );\r\n        }\r\n\r\n        // let keys = [\"a\", \"b\", \"c\", \"d\", \"e\"];\r\n        // let values = [1, 2, 3, 4, 5];\r\n        // let obj = {};\r\n\r\n        // for (let i = 0; i <= 4; i++) {\r\n        //     obj[keys[i]] = values[i];\r\n        // }\r\n\r\n        // console.log(obj);\r\n    };\r\n\r\n    createSticks(props.countYear);\r\n\r\n    return (\r\n        <div className=\"body-container\">\r\n            <div style={{ height: \"100%\", width: \"100%\", position: \"relative\" }}>\r\n                <Row style={{ height: \"100%\", width: \"100%\" }}>\r\n                    <Col md={{ offset: 1, span: 10 }} style={{ position: \"relative\" }}>\r\n                        <div className=\"stickContainer\">\r\n                            {sticks.map((stick) => stick)}\r\n                            {/* <div className=\"stickContainer-stick\" style={{ flexBasis: \"15%\" }}>\r\n                                g\r\n                            </div>\r\n                            <div className=\"stickContainer-stick\" style={{ flexBasis: \"15%\" }}>\r\n                                g\r\n                            </div>\r\n                            <div className=\"stickContainer-stick\" style={{ flexBasis: \"15%\" }}>\r\n                                g\r\n                            </div> */}\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: RootStateOrAny) => ({\r\n    countYear: state.generalState.countYear,\r\n    periodicity: state.generalState.periodicity,\r\n    initialAmount: state.generalState.initialAmount,\r\n    replenishment: state.generalState.replenishment,\r\n    interestAccruals: state.generalState.interestAccruals,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(ChartPic);\r\n"]},"metadata":{},"sourceType":"module"}