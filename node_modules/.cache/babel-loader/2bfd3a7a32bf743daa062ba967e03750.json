{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Viktor\\\\trd\\\\src\\\\stread\\\\chartFormula\\\\ChartFormula.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { Col, Row } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { actions } from \"../../actions and const/actions\";\nimport \"./chartFormula.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst InputsChart = props => {\n  const takeNumber = (v, value) => {\n    if (isNaN(+v) != true) {\n      return v;\n    } else {\n      return value;\n    }\n  };\n\n  const {\n    title,\n    callback,\n    value,\n    onClick\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    className: \"inputsChart1\",\n    style: {\n      fontSize: \"26px\"\n    },\n    onClick: onClick,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inputContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"inputContainer-inputTitle\",\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"required\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: value,\n        className: \"inputRowChart\",\n        onChange: e => {\n          // callback(e.target.value);\n          callback(takeNumber(e.target.value, value));\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n};\n\n_c = InputsChart;\n\nconst ChartFormula = props => {\n  _s();\n\n  const [initialAmount, setInitialAmount] = useState(\"\");\n  const [isReplenishmentDropmenuOpen, setIsReplenishmentDropmenuOpen] = useState(false);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"body-inputsContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Row, {\n        className: \"inputRowContainer\",\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          md: {\n            offset: 1,\n            span: 7\n          },\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"inputsChart1\",\n            style: {\n              fontSize: \"26px\"\n            },\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"inputContainer\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"inputContainer-inputTitle\",\n                children: \"initial amount\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 64,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"required\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 66,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                name: \"your-name\",\n                value: \"\",\n                className: \"inputRowChart\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 67,\n                columnNumber: 33\n              }, this), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        className: \"inputRowContainer\",\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          md: {\n            offset: 1,\n            span: 5\n          },\n          children: /*#__PURE__*/_jsxDEV(InputsChart, {\n            title: \"replenishment\",\n            callback: setInitialAmount,\n            value: \"3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          md: {\n            offset: 0,\n            span: 5\n          },\n          children: [/*#__PURE__*/_jsxDEV(InputsChart, {\n            title: \"Periodicity\",\n            callback: setInitialAmount,\n            value: \"3\",\n            onClick: () => {\n              setIsReplenishmentDropmenuOpen(!isReplenishmentDropmenuOpen);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 25\n          }, this), isReplenishmentDropmenuOpen ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"replenishmentDropmenuOpen-dropItem\",\n              children: \"EVERY YEAR\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"replenishmentDropmenuOpen-dropItem\",\n              children: \"EVERY MONTH\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        className: \"inputRowContainer\",\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          md: {\n            offset: 1,\n            span: 5\n          },\n          children: /*#__PURE__*/_jsxDEV(InputsChart, {\n            title: \"Interest accruals\",\n            callback: setInitialAmount,\n            value: \"3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          md: {\n            offset: 0,\n            span: 5\n          },\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"inputsChart\",\n            style: {\n              fontSize: \"48px\",\n              textAlign: \"center\",\n              left: \"40%\"\n            },\n            children: \"YEAR\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        className: \"inputRowContainer\",\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          md: {\n            offset: 1,\n            span: 10\n          },\n          children: /*#__PURE__*/_jsxDEV(InputsChart, {\n            title: \"Number of years\",\n            callback: props.setCounterYear,\n            value: props.countYear\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(ChartFormula, \"r8LaeKiY8yhDTOPCjC5liUjJCRo=\");\n\n_c2 = ChartFormula;\n\nconst mapStateToProps = state => ({\n  countYear: state.generalState.countYear\n});\n\nexport default connect(mapStateToProps, {\n  setCounterYear: actions.setCounterYear\n})(ChartFormula);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"InputsChart\");\n$RefreshReg$(_c2, \"ChartFormula\");","map":{"version":3,"sources":["C:/Users/Viktor/trd/src/stread/chartFormula/ChartFormula.tsx"],"names":["useState","Col","Row","connect","actions","InputsChart","props","takeNumber","v","value","isNaN","title","callback","onClick","fontSize","e","target","ChartFormula","initialAmount","setInitialAmount","isReplenishmentDropmenuOpen","setIsReplenishmentDropmenuOpen","offset","span","textAlign","left","setCounterYear","countYear","mapStateToProps","state","generalState"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\r\nimport { Col, Row } from \"react-bootstrap\";\r\nimport { connect, RootStateOrAny } from \"react-redux\";\r\nimport { actions } from \"../../actions and const/actions\";\r\nimport \"./chartFormula.css\";\r\n\r\ntype PropsTypeInputsChart = {\r\n    title: string;\r\n    callback: (n: string) => void;\r\n    value: string;\r\n    onClick?: () => void;\r\n};\r\n\r\ntype PropsType = {\r\n    setCounterYear: (year: string) => void;\r\n    countYear: string;\r\n};\r\n\r\nconst InputsChart = (props: PropsTypeInputsChart) => {\r\n    const takeNumber = (v: string, value: string) => {\r\n\r\n        \r\n        if (isNaN(+v) != true) {\r\n            return v;\r\n        } else {\r\n            return value;\r\n        }\r\n    };\r\n\r\n    const { title, callback, value, onClick } = props;\r\n\r\n    return (\r\n        <p className=\"inputsChart1\" style={{ fontSize: \"26px\" }} onClick={onClick}>\r\n            <div className=\"inputContainer\">\r\n                <p className=\"inputContainer-inputTitle\">{title}</p>\r\n                <span className=\"required\"></span>\r\n                <br />\r\n                <input\r\n                    type=\"text\"\r\n                    value={value}\r\n                    className=\"inputRowChart\"\r\n                    onChange={(e) => {\r\n                        // callback(e.target.value);\r\n                        callback(takeNumber(e.target.value, value));\r\n                    }}\r\n                />\r\n            </div>\r\n        </p>\r\n    );\r\n};\r\n\r\nconst ChartFormula = (props: PropsType) => {\r\n    const [initialAmount, setInitialAmount] = useState<string>(\"\");\r\n\r\n    const [isReplenishmentDropmenuOpen, setIsReplenishmentDropmenuOpen] = useState<boolean>(false);\r\n\r\n    return (\r\n        <>\r\n            <div className=\"body-inputsContainer\">\r\n                <Row className=\"inputRowContainer\">\r\n                    <Col md={{ offset: 1, span: 7 }}>\r\n                        <p className=\"inputsChart1\" style={{ fontSize: \"26px\" }}>\r\n                            <div className=\"inputContainer\">\r\n                                <p className=\"inputContainer-inputTitle\">initial amount</p>\r\n                                <span className=\"required\"></span>\r\n                                <br />\r\n                                <input type=\"text\" name=\"your-name\" value=\"\" className=\"inputRowChart\" />{\" \"}\r\n                            </div>\r\n                        </p>\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"inputRowContainer\">\r\n                    <Col md={{ offset: 1, span: 5 }}>\r\n                        <InputsChart title={\"replenishment\"} callback={setInitialAmount} value={\"3\"} />\r\n                    </Col>\r\n                    <Col md={{ offset: 0, span: 5 }}>\r\n                        <InputsChart\r\n                            title={\"Periodicity\"}\r\n                            callback={setInitialAmount}\r\n                            value={\"3\"}\r\n                            onClick={() => {\r\n                                setIsReplenishmentDropmenuOpen(!isReplenishmentDropmenuOpen);\r\n                            }}\r\n                        />\r\n\r\n                        {isReplenishmentDropmenuOpen ? (\r\n                            <>\r\n                                <div className=\"replenishmentDropmenuOpen-dropItem\">EVERY YEAR</div>\r\n                                <div className=\"replenishmentDropmenuOpen-dropItem\">EVERY MONTH</div>\r\n                            </>\r\n                        ) : (\r\n                            <div className=\"\"></div>\r\n                        )}\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"inputRowContainer\">\r\n                    <Col md={{ offset: 1, span: 5 }}>\r\n                        <InputsChart title={\"Interest accruals\"} callback={setInitialAmount} value={\"3\"} />\r\n                    </Col>\r\n                    <Col md={{ offset: 0, span: 5 }}>\r\n                        <p className=\"inputsChart\" style={{ fontSize: \"48px\", textAlign: \"center\", left: \"40%\" }}>\r\n                            YEAR\r\n                        </p>\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"inputRowContainer\">\r\n                    <Col md={{ offset: 1, span: 10 }}>\r\n                        <InputsChart\r\n                            title={\"Number of years\"}\r\n                            callback={props.setCounterYear}\r\n                            value={props.countYear}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: RootStateOrAny) => ({\r\n    countYear: state.generalState.countYear,\r\n});\r\n\r\nexport default connect(mapStateToProps, { setCounterYear: actions.setCounterYear })(ChartFormula);\r\n"]},"metadata":{},"sourceType":"module"}