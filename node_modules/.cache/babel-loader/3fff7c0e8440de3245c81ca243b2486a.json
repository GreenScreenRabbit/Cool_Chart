{"ast":null,"code":"import { applyMiddleware, createStore } from \"redux\"; //import { rootReducer } from \"./rootReducer\"\n\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { rootReducer } from \"./rootReducer\";\n\nfunction logger(_ref) {\n  let {\n    getState\n  } = _ref;\n  return next => action => {\n    console.log('will dispatch', action); // Call the next dispatch method in the middleware chain.\n\n    const returnValue = next(action);\n    console.log('state after dispatch', getState()); // This will likely be the action itself, unless\n    // a middleware further in chain changed it.\n\n    return returnValue;\n  };\n}\n\nexport const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));","map":{"version":3,"sources":["C:/Users/Viktor/trd/src/createState.tsx"],"names":["applyMiddleware","createStore","thunk","composeWithDevTools","rootReducer","logger","getState","next","action","console","log","returnValue","store"],"mappings":"AAAA,SAASA,eAAT,EAAmCC,WAAnC,QAAsD,OAAtD,C,CACA;;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACI,SAASC,mBAAT,QAAoC,0BAApC;AACJ,SAASC,WAAT,QAA4B,eAA5B;;AAWA,SAASC,MAAT,OAAmC;AAAA,MAAnB;AAAEC,IAAAA;AAAF,GAAmB;AAC/B,SAAQC,IAAD,IAA+BC,MAAD,IAAiB;AAClDC,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,MAA7B,EADkD,CAGlD;;AACA,UAAMG,WAAW,GAAGJ,IAAI,CAACC,MAAD,CAAxB;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCJ,QAAQ,EAA5C,EANkD,CAQlD;AACA;;AACA,WAAOK,WAAP;AACH,GAXD;AAYH;;AAKD,OAAO,MAAMC,KAAK,GAAGX,WAAW,CAACG,WAAD,EAAcD,mBAAmB,CAACH,eAAe,CAACE,KAAD,CAAhB,CAAjC,CAAzB","sourcesContent":["import { applyMiddleware, compose, createStore } from \"redux\"\r\n//import { rootReducer } from \"./rootReducer\"\r\nimport thunk from 'redux-thunk';\r\n    import { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { rootReducer } from \"./rootReducer\";\r\n\r\n\r\ndeclare global {\r\n    interface Window {\r\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction logger({ getState }: any) {\r\n    return (next: (arg0: any) => any) => (action: any) => {\r\n        console.log('will dispatch', action)\r\n\r\n        // Call the next dispatch method in the middleware chain.\r\n        const returnValue = next(action)\r\n\r\n        console.log('state after dispatch', getState())\r\n\r\n        // This will likely be the action itself, unless\r\n        // a middleware further in chain changed it.\r\n        return returnValue\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)),\r\n\r\n);"]},"metadata":{},"sourceType":"module"}