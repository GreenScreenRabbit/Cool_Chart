{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Viktor\\\\trd\\\\src\\\\stread\\\\chartPic\\\\ChartPic.tsx\";\nimport { Col, Row } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport \"./chartPic.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChartPic = props => {\n  const sticks = [];\n  const [isShowD];\n  let maxCapitalAtMouth = 0;\n\n  const takePeriodicityYear = () => {\n    if (props.periodicity == \"EVERY MONTH\") {\n      return +props.replenishment * 12;\n    } else {\n      return +props.replenishment;\n    }\n  };\n\n  const periodicityYear = takePeriodicityYear();\n\n  const calculationDefaultMoney = (periodicityYear, countYear, initialAmount) => {\n    const defaultMoney = [];\n    defaultMoney.push(+initialAmount + periodicityYear);\n\n    for (var i = 0; i < +countYear - 1; i++) {\n      defaultMoney.push(defaultMoney[i] + periodicityYear);\n    }\n\n    console.log(`defaultMoney = ${defaultMoney}`);\n    return defaultMoney;\n  };\n\n  const moneyWithoutPercent = calculationDefaultMoney(periodicityYear, props.countYear, props.initialAmount);\n\n  const calculationCompoundInterest = () => {\n    const percentMoney = [];\n    percentMoney.push((+props.initialAmount + periodicityYear) / 100 * (100 + +props.interestAccruals));\n\n    for (var i = 0; i < +props.countYear - 1; i++) {\n      percentMoney.push(+(+((+percentMoney[i] + periodicityYear) / 100) * (100 + +props.interestAccruals)));\n    }\n\n    const removeСommas = money => {\n      return money.map(num => {\n        return +num.toFixed(10);\n      });\n    };\n\n    const money = removeСommas(percentMoney);\n    return money;\n  };\n\n  const moneyWithPercent = calculationCompoundInterest();\n\n  const findMaxCapitalAtMouth = money => {\n    maxCapitalAtMouth = Math.max(...money);\n  };\n\n  findMaxCapitalAtMouth(moneyWithPercent);\n  console.log(`moneyWithPercent = ${moneyWithPercent}`);\n  console.log(`maxCapitalAtMouth = ${maxCapitalAtMouth}`);\n\n  const createSticks = (yearCount, isMoneyWithPercent) => {\n    const stck = [];\n\n    for (var i = 0; i < yearCount.length; i++) {\n      console.log(i);\n      console.log(yearCount);\n      let isShowMenu = false;\n\n      const showPropMenu = () => {\n        console.log(\"F1\");\n        isShowMenu = true;\n      };\n\n      if (yearCount[0] != 0) stck.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stickContainer-stick\",\n        onClick: () => showPropMenu(),\n        style: {\n          flexBasis: \"10%\",\n          backgroundColor: isMoneyWithPercent ? \"blue\" : \"orange\",\n          height: +yearCount[i] / (maxCapitalAtMouth / 100) + \"px\"\n        },\n        children: [isShowMenu ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"\",\n          children: \"true\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 39\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"\",\n          children: \"false\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 70\n        }, this), +yearCount[i]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }, this));\n      if (yearCount[0] != 0) sticks.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stickContainer-stick\",\n        style: {\n          flexBasis: \"10%\"\n        },\n        children: [\"g \", yearCount[i]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 21\n      }, this));\n    }\n\n    return stck;\n  }; // createSticks(props.countYear, true);\n\n\n  const stc = createSticks(moneyWithPercent, true);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"body-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: \"100%\",\n        width: \"100%\",\n        position: \"relative\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        style: {\n          height: \"100%\",\n          width: \"100%\"\n        },\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          md: {\n            offset: 1,\n            span: 10\n          },\n          style: {\n            position: \"relative\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stickContainer\",\n            children: stc.map((stick, i) => {\n              let bol = false;\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                onClick: () => console.log(i),\n                children: [bol ? /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: \"call\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 132,\n                  columnNumber: 48\n                }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"\",\n                  children: \"false\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 132,\n                  columnNumber: 66\n                }, this), stick]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 131,\n                columnNumber: 37\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 9\n  }, this);\n};\n\n_c = ChartPic;\n\nconst mapStateToProps = state => ({\n  countYear: state.generalState.countYear,\n  periodicity: state.generalState.periodicity,\n  initialAmount: state.generalState.initialAmount,\n  replenishment: state.generalState.replenishment,\n  interestAccruals: state.generalState.interestAccruals\n});\n\nexport default connect(mapStateToProps, {})(ChartPic);\n\nvar _c;\n\n$RefreshReg$(_c, \"ChartPic\");","map":{"version":3,"sources":["C:/Users/Viktor/trd/src/stread/chartPic/ChartPic.tsx"],"names":["Col","Row","connect","ChartPic","props","sticks","isShowD","maxCapitalAtMouth","takePeriodicityYear","periodicity","replenishment","periodicityYear","calculationDefaultMoney","countYear","initialAmount","defaultMoney","push","i","console","log","moneyWithoutPercent","calculationCompoundInterest","percentMoney","interestAccruals","removeСommas","money","map","num","toFixed","moneyWithPercent","findMaxCapitalAtMouth","Math","max","createSticks","yearCount","isMoneyWithPercent","stck","length","isShowMenu","showPropMenu","flexBasis","backgroundColor","height","stc","width","position","offset","span","stick","bol","mapStateToProps","state","generalState"],"mappings":"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","sourcesContent":["import { Col, Row } from \"react-bootstrap\";\r\nimport { connect, RootStateOrAny } from \"react-redux\";\r\nimport \"./chartPic.css\";\r\n\r\ntype PropsType = {\r\n    countYear: string;\r\n    periodicity: string;\r\n    initialAmount: string;\r\n    replenishment: string;\r\n    interestAccruals: string;\r\n};\r\n\r\nconst ChartPic = (props: PropsType) => {\r\n    const sticks: JSX.Element[] = [];\r\n\r\n\r\n    const [isShowD]\r\n\r\n    let maxCapitalAtMouth: number = 0;\r\n\r\n    const takePeriodicityYear = (): number => {\r\n        if (props.periodicity == \"EVERY MONTH\") {\r\n            return +props.replenishment * 12;\r\n        } else {\r\n            return +props.replenishment;\r\n        }\r\n    };\r\n\r\n    const periodicityYear = takePeriodicityYear();\r\n\r\n    const calculationDefaultMoney = (periodicityYear: number, countYear: string, initialAmount: string) => {\r\n        const defaultMoney: number[] = [];\r\n\r\n        defaultMoney.push(+initialAmount + periodicityYear);\r\n\r\n        for (var i = 0; i < +countYear - 1; i++) {\r\n            defaultMoney.push(defaultMoney[i] + periodicityYear);\r\n        }\r\n        console.log(`defaultMoney = ${defaultMoney}`);\r\n\r\n        return defaultMoney;\r\n    };\r\n\r\n    const moneyWithoutPercent = calculationDefaultMoney(periodicityYear, props.countYear, props.initialAmount);\r\n\r\n    const calculationCompoundInterest = () => {\r\n        const percentMoney: number[] = [];\r\n\r\n        percentMoney.push(((+props.initialAmount + periodicityYear) / 100) * (100 + +props.interestAccruals));\r\n\r\n        for (var i = 0; i < +props.countYear - 1; i++) {\r\n            percentMoney.push(+(+((+percentMoney[i] + periodicityYear) / 100) * (100 + +props.interestAccruals)));\r\n        }\r\n\r\n        const removeСommas = (money: number[]) => {\r\n            return money.map((num) => {\r\n                return +num.toFixed(10);\r\n            });\r\n        };\r\n\r\n        const money = removeСommas(percentMoney);\r\n\r\n        return money;\r\n    };\r\n\r\n    const moneyWithPercent = calculationCompoundInterest();\r\n\r\n    const findMaxCapitalAtMouth = (money: number[]) => {\r\n        maxCapitalAtMouth = Math.max(...money);\r\n    };\r\n    findMaxCapitalAtMouth(moneyWithPercent);\r\n\r\n    console.log(`moneyWithPercent = ${moneyWithPercent}`);\r\n\r\n    console.log(`maxCapitalAtMouth = ${maxCapitalAtMouth}`);\r\n\r\n    const createSticks = (yearCount: number[], isMoneyWithPercent: boolean) => {\r\n        const stck: JSX.Element[] = [];\r\n\r\n        for (var i = 0; i < yearCount.length; i++) {\r\n            console.log(i);\r\n            console.log(yearCount);\r\n\r\n            let isShowMenu = false;\r\n\r\n            const showPropMenu = () => {\r\n                console.log(\"F1\");\r\n                isShowMenu = true;\r\n            };\r\n\r\n            if (yearCount[0] != 0)\r\n                stck.push(\r\n                    <div\r\n                        className=\"stickContainer-stick\"\r\n                        onClick={() => showPropMenu()}\r\n                        style={{\r\n                            flexBasis: \"10%\",\r\n                            backgroundColor: isMoneyWithPercent ? \"blue\" : \"orange\",\r\n                            height: +yearCount[i] / (maxCapitalAtMouth / 100) + \"px\",\r\n                        }}\r\n                    >\r\n                        {isShowMenu ? <div className=\"\">true</div> : <div className=\"\">false</div>}\r\n                        {+yearCount[i]}\r\n                    </div>\r\n                );\r\n            if (yearCount[0] != 0)\r\n                sticks.push(\r\n                    <div className=\"stickContainer-stick\" style={{ flexBasis: \"10%\" }}>\r\n                        g {yearCount[i]}\r\n                    </div>\r\n                );\r\n        }\r\n\r\n        return stck;\r\n    };\r\n\r\n    // createSticks(props.countYear, true);\r\n    const stc = createSticks(moneyWithPercent, true);\r\n\r\n    return (\r\n        <div className=\"body-container\">\r\n            <div style={{ height: \"100%\", width: \"100%\", position: \"relative\" }}>\r\n                <Row style={{ height: \"100%\", width: \"100%\" }}>\r\n                    <Col md={{ offset: 1, span: 10 }} style={{ position: \"relative\" }}>\r\n                        {/* <div className=\"stickContainer\">{sticks.map((stick) => stick)}</div> */}\r\n                        <div className=\"stickContainer\">\r\n                            {stc.map((stick, i) => {\r\n                                let bol = false;\r\n\r\n                                return (\r\n                                    <div onClick={() => console.log(i)}>\r\n                                        {bol ? <div>call</div> : <div className=\"\">false</div>}\r\n                                        {stick}\r\n                                    </div>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: RootStateOrAny) => ({\r\n    countYear: state.generalState.countYear,\r\n    periodicity: state.generalState.periodicity,\r\n    initialAmount: state.generalState.initialAmount,\r\n    replenishment: state.generalState.replenishment,\r\n    interestAccruals: state.generalState.interestAccruals,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(ChartPic);\r\n"]},"metadata":{},"sourceType":"module"}